

import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * The test class PersonTest.
 *
 * @author  (your name)
 * @version (a version number or a date)
 */
public class PersonTest
{
    /**
     * Default constructor for test class PersonTest
     */
    public PersonTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    @Before
    public void setUp()
    {
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    @After
    public void tearDown()
    {
    }

    @Test
    public void testAge()
    {
        Person person1 = new Person();
        
        //positive testing
        person1.setAge(0*Person.MAX_AGE_VALUE);
        assertEquals(0*Person.MAX_AGE_VALUE, person1.getAge());
        person1.setAge(Person.MAX_AGE_VALUE/2);
        assertEquals(Person.MAX_AGE_VALUE/2, person1.getAge());
        person1.setAge(Person.MAX_AGE_VALUE);
        assertEquals(Person.MAX_AGE_VALUE, person1.getAge());
        
        //negative testing
        person1.setAge(0*Person.MAX_AGE_VALUE-1);
        assertEquals(Person.MAX_AGE_VALUE, person1.getAge());
        person1.setAge(0*Person.MAX_AGE_VALUE-10);
        assertEquals(Person.MAX_AGE_VALUE, person1.getAge());
        person1.setAge(Person.MAX_AGE_VALUE+1);
        assertEquals(Person.MAX_AGE_VALUE, person1.getAge());
        person1.setAge(Person.MAX_AGE_VALUE+20);
        assertEquals(Person.MAX_AGE_VALUE, person1.getAge());
    }

    @Test
    public void testName()
    {
        Person person1 = new Person();
        person1.setName("pepe");
        assertEquals("pepe", person1.getName());
    }

    @Test
    public void testSurname()
    {
        Person person1 = new Person();
        person1.setSurname("perez");
        assertEquals("perez", person1.getSurname());
    }

    @Test
    public void testGender()
    {
        Person person1 = new Person();
        
        //setGender-getGender
        person1.setGender(Person.FEMALE_VALUE);
        assertEquals(Person.FEMALE_VALUE, person1.getGender());
        person1.setGender(Person.MALE_VALUE);
        assertEquals(Person.MALE_VALUE, person1.getGender());
        
        //getGenderText
        person1.setGender(Person.FEMALE_VALUE);
        assertEquals(Person.FEMALE_TEXT, person1.getGenderText());
        person1.setGender(Person.MALE_VALUE);
        assertEquals(Person.MALE_TEXT, person1.getGenderText());
        
        //isAGirl
        person1.setGender(Person.FEMALE_VALUE);
        assertEquals(Person.FEMALE_VALUE, person1.isAGirl());
        person1.setGender(Person.MALE_VALUE);
        assertEquals(Person.MALE_VALUE, person1.isAGirl());
    }

    @Test
    public void testCriticalAge()
    {
        Person person1 = new Person();
        
        //less than adulthood
        person1.setAge(Person.ADULTHOOD_AGE-5);
        assertEquals(Person.ADULTHOOD_AGE - person1.getAge(), person1.getCriticalAge());
        person1.setAge(Person.ADULTHOOD_AGE-1);
        assertEquals(Person.ADULTHOOD_AGE - person1.getAge(), person1.getCriticalAge());
        
        //between adulthood and retirement
        person1.setAge(Person.ADULTHOOD_AGE);
        assertEquals(Person.RETIREMENT_AGE - person1.getAge(), person1.getCriticalAge());
        person1.setAge(Person.RETIREMENT_AGE-5);
        assertEquals(Person.RETIREMENT_AGE - person1.getAge(), person1.getCriticalAge());
        person1.setAge(Person.RETIREMENT_AGE-1);
        assertEquals(Person.RETIREMENT_AGE - person1.getAge(), person1.getCriticalAge());
        
        //after retirement
        person1.setAge(Person.RETIREMENT_AGE);
        assertEquals(person1.getAge() - Person.RETIREMENT_AGE, person1.getCriticalAge());
        person1.setAge(Person.RETIREMENT_AGE+20);
        assertEquals(person1.getAge() - Person.RETIREMENT_AGE, person1.getCriticalAge());
    }

    @Test
    public void testGetHashCode()
    {
        Person person1 = new Person();
        person1.setName("marcos");
        person1.setSurname("tineo");
        person1.setAge(40);
        person1.setGender(false);
        assertEquals("MAR-TIN-40-false", person1.getHashCode());
    }

    @Test
    public void testToString()
    {
        Person person1 = new Person();
        person1.setName("sergio");
        person1.setSurname("pino");
        person1.setAge(23);
        person1.setGender(false);
        //toStringV1
        assertEquals("[Name: sergio - Surname: pino - Age: 23 - Gender: home]", person1.toStringV1());
        //toStringV2
        assertEquals("[Name: sergio - Surname: pino - Age: 23 - Gender: home]", person1.toStringV2());
    }
    
    @Test
    public void testIsYourAge()
    {
        Person person1  = new Person();
        
        person1.setAge(Person.ADULTHOOD_AGE);
        assertEquals(true, person1.isYourAge(Person.ADULTHOOD_AGE));
        assertEquals(false, person1.isYourAge(Person.RETIREMENT_AGE));
        
        person1.setAge(Person.RETIREMENT_AGE);
        assertEquals(true, person1.isYourAge(Person.RETIREMENT_AGE));
        assertEquals(false, person1.isYourAge(Person.ADULTHOOD_AGE));
    }
    
    @Test
    public void testIsYou()
    {
        Person person1  = new Person();
        
        person1.setName("Víctor");
        assertEquals(true, person1.isYou("Víctor"));
        assertEquals(false, person1.isYou("Juan"));
        
        person1.setName("Juan");
        assertEquals(true, person1.isYou("Juan"));
        assertEquals(false, person1.isYou("Víctor"));
        
        person1.setName("VÍCTOR");
        assertEquals(true, person1.isYou("Víctor"));
        assertEquals(false, person1.isYou("Juan"));
    }
    
    @Test
    public void testIsYouPerson()
    {
        Person person1 = new Person("Víctor", "Núñez", 18, Person.MALE_VALUE);
                
        Person person2 = new Person("Ana", "Fernández", 20, Person.FEMALE_VALUE);
        
        assertEquals (true, person1.isYou(person1));
        assertEquals (true, person2.isYou(person2));
        assertEquals (false, person1.isYou(person2));
        assertEquals (false, person2.isYou(person1));
        
    }
    
    @Test
    public void testCompareTo()
    {
        Person person1 = new Person(Person.ADULTHOOD_AGE);
        Person person2 = new Person(Person.RETIREMENT_AGE);
        
        assertEquals (-1, person1.compareTo(person2));
        assertEquals (1, person2.compareTo(person1));
        assertEquals (0, person1.compareTo(person1));
        assertEquals (0, person2.compareTo(person2));
        
    }
    
}
